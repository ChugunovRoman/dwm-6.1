/* See LICENSE file for copyright and license details. */

/* appearance */
static const char *fonts[] = {
	"monospace:size=8",
	"Terminus:size=8",
	"FontAwesome:size=8"
};
static const char dmenufont[]       = "monospace:size=8";
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#20163B";
static const char normfgcolor[]     = "#bbbbbb";
static const char selbordercolor[]  = "#0F113F";
static const char selbgcolor[]      = "#0F113F";
static const char selfgcolor[]      = "#eeeeee";
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayspacing = 2;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, 0: display systray on the last monitor*/
static const int showsystray        = 1;        /* 0 means no systray */
static const unsigned int borderpx  = 0;        /* border pixel of windows */
static const unsigned int snap      = 24;       /* snap pixel */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */

/* tagging */
static const char *tags[] = {
	"\uF120",  /* term/console */
	"\uF121",  /* code/</> */
	"\uF268",  /* web/chrome */
	"\uF07C",  /* files/папка */
	"\uF008",  /* media/кино */
	"\uF03E",  /* graphics/картина */
	"\uF11B",  /* games/gamepad */
	"\uF013",  /* noname/settings */
	"\uF26C"   /* noname/monitor */
};

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class            instance    title       tags mask     isfloating   monitor */
	{ "Gnome-terminal", NULL,       NULL,       1,            0,           -1 },

	{ "Code",           NULL,       NULL,       1 << 1,       0,           -1 },
	{ "Sublime_text",   NULL,       NULL,       1 << 1,       0,           -1 },
	{ "Atom", 		    NULL,       NULL,       1 << 1,       0,           -1 },

	{ "Firefox",        NULL,       NULL,       1 << 2,       0,           -1 },
	{ "luakit",         NULL,       NULL,       1 << 2,       0,           -1 },
	{ "Google-chrome",  NULL,       NULL,       1 << 2,       0,           -1 },
	{ "Chromium-browser",  NULL,       NULL,       1 << 2,       0,           -1 },
	{ "yandex-browser-beta", NULL,       NULL,       1 << 2,       0,           -1 },

	{ "pcmanfm-qt",     NULL,       NULL,       1 << 3,       0,           -1 },
	{ "Pcmanfm",        NULL,       NULL,       1 << 3,       0,           -1 },
	{ "Nautilus",        NULL,       NULL,       1 << 3,       0,           -1 },

	{ "Audacious",      NULL,       NULL,       1 << 4,       0,           -1 },
	{ "Audacity",       NULL,       NULL,       1 << 4,       0,           -1 },
	{ "TelegramDesktop",NULL,       NULL,       1 << 4,       0,           -1 },

	{ "Gimp",           NULL,       NULL,       1 << 5,       0,           -1 },
	{ "Photoshop.exe",  NULL,       NULL,       1 << 5,       0,           -1 },
	{ "Inkscape",       NULL,       NULL,       1 << 5,       0,           -1 },

	{ "Mainwindow.py",  NULL,       NULL,       1 << 6,       0,           -1 },

	{ "VirtualBox",     NULL,       NULL,       1 << 7,       0,           -1 },

	{ "qBittorrent",    NULL,       NULL,       1 << 8,       0,           -1 },
};

/* layout(s) */
static const float mfact     = 0.60; /* factor of master area size [0.05..0.95] */
static const int nmaster     = 1;    /* number of clients in master area */
static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */

#include "grid.c"
#include "fibonacci.c"
#include "bstack.c"
#include "bstackhoriz.c"

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "\uF009",          tile },    /* ◫ first entry is default */ /* \x25EB */
	{ "\uF24D",   	         NULL },    /*  no layout function means floating behavior */ /* \xF24D */
	{ "\uF2D0",          monocle },    /* ▇ */
	{ "\uF00A",          grid },    /* ▇ */
	{ "\u259A",          dwindle },    /* ▇ */
	{ "\u259E",          spiral },    /* ▇ */
	{ "\uF0C9",          bstack },    /* ▇ */
	{ "\uF0CA",          bstackhoriz },    /* ▇ */

};

/* key definitions */
#define MODKEY Mod4Mask
#define ALT Mod1Mask
#define SHIFT ShiftMask
#define CTRL ControlMask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[]      = { "dmenu_run", "-m", "0", "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[]       = { "gnome-terminal", NULL };
static const char *chromecmd[]     = { "chromium-browser", NULL };
static const char *yandexcmd[]     = { "yandex-browser", NULL };
static const char *audaciouscmd[]  = { "audacious", NULL };
static const char *sublimecmd[]    = { "sublime_text", NULL };
static const char *vscodecmd[]     = { "code-insiders", NULL };
static const char *atomcmd[]       = { "atom", NULL };
static const char *firefoxcmd[]	   = { "firefox", NULL };
static const char *pcmanfmcmd[]	   = { "pcmanfm-qt", NULL };
static const char *supcmanfmcmd[]  = { "gksu", "pcmanfm-qt", NULL };
static const char *virtualboxcmd[] = { "virtualbox", NULL };
static const char *suvirtualboxcmd[]= { "gksu", "virtualbox", NULL };
static const char *photoshopcmd[]  = { "/usr/share/playonlinux/playonlinux", "--run", "'Adobe Photoshop CS6'", NULL };
static const char *gimpcmd[]       = { "gimp", NULL };

static const char *passcmd[]       = { "gedit", "/media/ruut/MyDisk/Soft/Programming/3.txt", NULL };
static const char *hostcmd[]       = { "gedit", "/media/ruut/MyDisk/Soft/Programming/hosts.php", NULL };
static const char *notescmd[]       = { "gedit", "/media/ruut/MyDisk/Soft/Programming/notes.txt", NULL };

static const char *gsacmd[]       = { "shutter", "-s", NULL };
static const char *gswcmd[]       = { "shutter", "-w", NULL };
static const char *gsfcmd[]       = { "shutter", "-f", NULL };
// static const char *gsaccmd[]       = { "gnome-screenshot", "-a", "-c", NULL };
// static const char *gswccmd[]       = { "gnome-screenshot", "-w", "-c", NULL };
static const char *gsfccmd[]       = { "gnome-screenshot", "-c", NULL };

static const char *xkillcmd[]	   = { "xkill", NULL };
static const char *shutdowncmd[]   = { "shutdown", "-h", "+0", NULL };
static const char *rebootcmd[]	   = { "reboot", NULL };

static Key keys[] = {
	/* modifier                     key        function        argument */
	{ ALT,                          XK_d,      spawn,          {.v = dmenucmd } },
	{ ALT,                          XK_t,      spawn,          {.v = termcmd } },
	{ ALT,                          XK_w,      spawn,          {.v = chromecmd } },
	{ ALT,                          XK_a,      spawn,          {.v = audaciouscmd } },
	{ ALT|SHIFT,                    XK_x,      spawn,          {.v = atomcmd } },
	{ ALT,		                    XK_x,      spawn,          {.v = vscodecmd } },
	{ MODKEY|SHIFT,                 XK_x,      spawn,          {.v = sublimecmd } },
	{ ALT,                          XK_f,	   spawn,	       {.v = firefoxcmd } },
	{ ALT,                          XK_y,	   spawn,	       {.v = yandexcmd } },
	{ ALT,                          XK_e,	   spawn,	       {.v = pcmanfmcmd } },
	{ ALT|SHIFT,                    XK_e,	   spawn,	       {.v = supcmanfmcmd } },
	{ ALT,                          XK_v,	   spawn,	       {.v = virtualboxcmd } },
	{ ALT|SHIFT,                    XK_v,	   spawn,	       {.v = suvirtualboxcmd } },
	{ ALT,		                    XK_p,	   spawn,	       {.v = photoshopcmd } },
	{ ALT,      		            XK_g,	   spawn,	       {.v = gimpcmd } },

	{ SHIFT,      		            XK_Print,  spawn,	       {.v = gsacmd } },
	{ ALT,                          XK_Print,  spawn,	       {.v = gswcmd } },
	// { NULL,      		            XK_Print,  spawn,	       {.v = gsfcmd } },
	// { CTRL|SHIFT,      		        XK_Print,  spawn,	       {.v = gsaccmd } },
	// { CTRL|ALT|SHIFT,  		        XK_Print,  spawn,	       {.v = gswccmd } },
	{ NULL,         		        XK_Print,  spawn,	       {.v = gsfccmd } },

	{ CTRL,      		            XK_1,	   spawn,	       {.v = passcmd } },
	{ CTRL,      		            XK_2,      spawn,	       {.v = hostcmd } },
	{ CTRL,      		            XK_3,      spawn,	       {.v = notescmd } },

	{ MODKEY,                       XK_r,	   spawn,	       {.v = rebootcmd } },
	{ MODKEY,                       XK_h,	   spawn,	       {.v = shutdowncmd } },
	{ MODKEY,                       XK_x,	   spawn,	       {.v = xkillcmd } },

	{ MODKEY,                       XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_w,      focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_s,      focusstack,     {.i = -1 } },
	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
	{ MODKEY,                       XK_o,      incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_a,      setmfact,       {.f = -0.05} },
	{ MODKEY,                       XK_d,      setmfact,       {.f = +0.05} },
	{ MODKEY,                       XK_Return, zoom,           {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY,                       XK_c,      killclient,     {0} },
	{ MODKEY|SHIFT,                 XK_t,      setlayout,      {.v = &layouts[0]} },
	{ MODKEY|SHIFT,                 XK_f,      setlayout,      {.v = &layouts[1]} },
	{ MODKEY|SHIFT,                 XK_m,      setlayout,      {.v = &layouts[2]} },
	{ MODKEY|SHIFT,                 XK_g,      setlayout,      {.v = &layouts[3]} },
	{ MODKEY|SHIFT,                 XK_d,      setlayout,      {.v = &layouts[4]} },
	{ MODKEY|SHIFT,                 XK_s,      setlayout,      {.v = &layouts[5]} },
	{ MODKEY|SHIFT,                 XK_c,      setlayout,      {.v = &layouts[6]} },
	{ MODKEY|SHIFT,                 XK_h,      setlayout,      {.v = &layouts[7]} },
	{ MODKEY,                       XK_space,  setlayout,      {0} },
	{ MODKEY|SHIFT,                 XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|SHIFT,                 XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_k,      focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_l,      focusmon,       {.i = +1 } },
	{ MODKEY|SHIFT,                 XK_k,      tagmon,         {.i = -1 } },
	{ MODKEY|SHIFT,                 XK_l,      tagmon,         {.i = +1 } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	{ MODKEY|SHIFT,                 XK_q,      quit,           {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
